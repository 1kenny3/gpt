```bot.py
import asyncio
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.filters.command import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from config import BOT_TOKEN
from g4f.client import Client
import os
from dataclasses import dataclass
from typing import Dict

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ g4f
client = Client()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_prompts: Dict[int, str] = {}

# –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ARTA
@dataclass
class ArtaModel:
    id: str
    name: str
    description: str

ARTA_MODELS = [
    ArtaModel("cinematic_art", "Cinematic Art", "–ö–∏–Ω–µ–º–∞—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Å—Ç–∏–ª—å"),
    ArtaModel("anime", "Anime", "–ê–Ω–∏–º–µ —Å—Ç–∏–ª—å"),
    ArtaModel("realistic", "Realistic", "–†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π —Å—Ç–∏–ª—å"),
    ArtaModel("creative", "Creative", "–ö—Ä–µ–∞—Ç–∏–≤–Ω—ã–π —Å—Ç–∏–ª—å"),
    ArtaModel("manga", "Manga", "–ú–∞–Ω–≥–∞ —Å—Ç–∏–ª—å"),
    ArtaModel("disney", "Disney", "–°—Ç–∏–ª—å –î–∏—Å–Ω–µ—è"),
    ArtaModel("enhance", "Enhance", "–£–ª—É—á—à–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ"),
    ArtaModel("pixel_art", "Pixel Art", "–ü–∏–∫—Å–µ–ª—å–Ω–∞—è –≥—Ä–∞—Ñ–∏–∫–∞")
]

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª—è–º –ø–æ ID
MODELS_DICT = {model.id: model for model in ARTA_MODELS}

def get_models_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏"""
    keyboard = InlineKeyboardMarkup(row_width=2)
    for model in ARTA_MODELS:
        keyboard.add(InlineKeyboardButton(
            text=f"{model.name} - {model.description}",
            callback_data=f"model_{model.id}"
        ))
    return keyboard

@dp.message(Command("start"))
async def cmd_start(message: Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /generate —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –∂–µ–ª–∞–µ–º–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.\n"
        "–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:\n"
        "1. /generate –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫–∏\n"
        "2. /generate anime –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º - –ø—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏\n\n"
        "–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /models"
    )

@dp.message(Command("generate"))
async def generate_prompt(message: Message):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    text = message.text.replace("/generate", "").strip()
    
    if not text:
        await message.answer(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /generate\n"
            "–ü—Ä–∏–º–µ—Ä—ã:\n"
            "1. /generate –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º\n"
            "2. /generate anime –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º"
        )
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—Å—Ç —Å –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏
    first_word = text.split()[0].lower()
    
    # –ò—â–µ–º –º–æ–¥–µ–ª—å –ø–æ ID –∏–ª–∏ –∏–º–µ–Ω–∏
    selected_model = None
    prompt = text
    
    for model in ARTA_MODELS:
        if first_word in [model.id.lower(), model.name.lower()]:
            selected_model = model
            # –£–±–∏—Ä–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –∏–∑ –ø—Ä–æ–º–ø—Ç–∞
            prompt = " ".join(text.split()[1:])
            break
    
    if selected_model:
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å —É–∫–∞–∑–∞–Ω–∞ —è–≤–Ω–æ, –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await generate_image(message, selected_model.id, prompt)
    else:
        # –ï—Å–ª–∏ –º–æ–¥–µ–ª—å –Ω–µ —É–∫–∞–∑–∞–Ω–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–ø—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        user_prompts[message.from_user.id] = text
        await message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç–∏–ª—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:",
            reply_markup=get_models_keyboard()
        )

async def generate_image(message: Message, model_id: str, prompt: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —É–∫–∞–∑–∞–Ω–Ω–æ–π –º–æ–¥–µ–ª—å—é –∏ –ø—Ä–æ–º–ø—Ç–æ–º"""
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        processing_msg = await message.answer("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–æ–∂–¥–∏—Ç–µ...")
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        response = await asyncio.to_thread(
            client.images.generate,
            model=model_id,
            prompt=prompt,
            response_format="url"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º URL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_url = response.data[0].url
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
        model = MODELS_DICT.get(model_id)
        model_name = model.name if model else model_id
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        await message.answer_photo(
            photo=image_url,
            caption=f"üé® –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –≤ —Å—Ç–∏–ª–µ {model_name}\n–ó–∞–ø—Ä–æ—Å: {prompt}"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        await processing_msg.delete()
        
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
        await message.answer(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@dp.callback_query(lambda c: c.data.startswith('model_'))
async def process_model_selection(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º ID –º–æ–¥–µ–ª–∏ –∏–∑ callback_data
    model_id = callback_query.data.replace('model_', '')
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    prompt = user_prompts.get(callback_query.from_user.id)
    
    if not prompt:
        await callback_query.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —Å –∫–æ–º–∞–Ω–¥–æ–π /generate")
        await callback_query.answer()
        return
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏
    await callback_query.message.delete()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    await generate_image(callback_query.message, model_id, prompt)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–æ–º–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    del user_prompts[callback_query.from_user.id]
    
    await callback_query.answer()

@dp.message(Command("models"))
async def show_models(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
    models_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:\n\n"
    for model in ARTA_MODELS:
        models_text += f"‚Ä¢ {model.name} ({model.id}) - {model.description}\n"
    
    models_text += "\n–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –ø—Ä—è–º–æ –≤ –∫–æ–º–∞–Ω–¥–µ generate:\n"
    models_text += "–ù–∞–ø—Ä–∏–º–µ—Ä: /generate anime –∫—Ä–∞—Å–∏–≤—ã–π –∑–∞–∫–∞—Ç –Ω–∞–¥ –º–æ—Ä–µ–º"
    
    await message.answer(models_text)

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main()) 
```

